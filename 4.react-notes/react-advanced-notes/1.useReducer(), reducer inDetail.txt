const [state, dispatch] = useReducer(reducer, initialState);


THE reducer METHOD IN THE useReducer IS A CONTROLLER OF ALL APP STATE VARIABLES.IT CONTAINS LOGIC THAT
CONTROLS HOW THESE STATE CHANGES AND TO WHAT STATES THEY CHANGE TO AND WHEN THEY CHANGE.


THE reducer IS CALLED USING ITS ANOTHER NAME (STANDARD-COMMON PRACTICE NAME) CALLED dispatch(). dispatch() GETS
TWO ARGUMENTS WHICH THE REDUCER METHOD IS DEFINED WITH. disptch() CARRIES THE MESSAGE(ACTION) WHICH DECIDES
WHICH STATE TO CHANGE. THE OTHER ARGUMENT CARRIED IT THE STATE OBJECT(AN OBJECT THAT CONTAINS ALL APP STATE VARIABLES)
AND THE ACTION ARGUMENT HAS THE DATA THAT IS USED TO DECIDE WHICH STATE VARIABLE TO CHANGE IN THE SECOND ARGUMENT
WHICH CARRIES ALL APP STATE VARIABLES.


state IS SAME AS INITIAL STATE (WHICH IS JUST DESTRUCTURED), IT IS AN ARGUMENT WHICH HAS DATA TYPE OF OBJECT CARRYING
ALL APP STATE VARIABLES AND DISPATCH IS SAME AS REDUCER.

STATE AND DISPATCH ARE NAMES USED TO CALL THE REDUCER AND INITIAL STATE - THESE NAMES CAN BE CHANGED TO ANY, ITS
JUST STANDARD TO CALL THEM Reducer and state.

### TO USE reducer and initialState USED IN A useReducer, reducer HAS TO BE DESTRUCTURED AS dispatch(TO BE USED FOR
FUNCTION CALLS TO ITSELF - REDUCER) AND  initialState HAS TO BE DESTRUCTURED AS  state WHICH THEN PASSED AS A GLOBAL
APP VARIABLE TO THE APP TO WHEN THE APP START,SO IT BEGINS WITH DEFAULT APP STATES THAT ARE THEN CHANGED BY THE USER
AS THE USER LOGINS AND INTERACTS WITH APP TO PROVIDE LOGIN, LOGOUT, RESPONSIVES PROCESS ETC AS THE USER USES THE APP

<AppContext.Provider value={{...state }} >

<AppContext >