IN REACT APPS WE CREATE A CONTEXT VARIABLE THAT IS USED TO HOLD ALL STATE VARIABLES THAT IS ARE USED IN THE
REDUCER FUNCTION AND ITS ALSO USED TO PASS OR HOLD FUNCTIONS THAT WILL CALL THE REDUCER FUNCTION VIA THE DISPATCH.

THIS CONTEXT VARIABLE IS THEN USED-RETURNED IN A COMPONENT( USUALLY CALLED AppContext ) THAT WRAPPS THE WHOLE REACT APPLICATION IN ORDER TO MAKE THE STATE VARIABLES  AND FUNCTIONS THAT WILL CALL THE REDUCER FUNCTION PASSED TO THE
CONTEXT VARIABLE TO BE AVAILABLE TO THE REACT APP, AND IN THIS WAY THE STATE OF THE ALL REACT APP IS MANAGED AND 
MAINTAINED.


IMPLEMENTATION

- OUTSIDE/ON TOP THE AppContext COMPONENT COMPONENT THAT WRAPPS THE WHOLE REACT APPLICATION

  const AppContext = React.createContext();

- INSIDE THE AppContext COMPONENT - COMPONENT THAT WRAPPS THE WHOLE REACT APPLICATION


return (

    // AppContext IS FEED/GIVEN ALL THE STATE VARIABLES USED BY THE reducer USING ...state
    // WHICH BECOME GLOBAL STATE VARIABLES & FUNCTIONS (SUCH AS displayAlert, registerUser) 
    // CALLING reducer VIA dispatch ARE PASSED AS WELL MAKING THEM APP GLOBAL METHODS

    <AppContext.Provider value={{...state, displayAlert, registerUser, loginUser, toggleSidebar, logoutUser}}>
      {children}

      {/* THE CHILDREN IS THE APP - THE COMPONENT MAKING THE APP SINCE CONTEXT WILL SURROUND
      THE WHOLE APP - THE APP APP NEEDS TO BE RENDERED THROUGH IT AS IT BECOMES THE PARENT COMPONENT */}
    </AppContext.Provider>

)

- INSIDE THE index.js FILE

root.render(
  <React.StrictMode>

    {/* AppProvider PROVIDES ACCESS TO CERTAIN STATE VARIABLES AND METHODS TO ALL APP
    COMPONENT WITHOUT HAVE TO DO PROP DRILLING WHEN ACCESS THESE IN SUB COMPONENTS */}

    <AppProvider>
      <App />
    </AppProvider>

  </React.StrictMode>
);