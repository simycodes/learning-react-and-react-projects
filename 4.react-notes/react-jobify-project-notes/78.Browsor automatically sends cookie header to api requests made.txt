NOTE: The browser automatically sends its cookies(attachees cookies) to the api on every api request made to the api/backend.

The browsor automatically adds a cookie header to all outgoing requests to the api

Cookie: firstname=Simon; token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2M2ZjZDgyMTQyZTY1NTM2ZWY5M2U2NTciLCJpYXQiOjE2ODA2MDY0NTcsImV4cCI6MTY4MDY5Mjg1N30.6QjH14VEVCTUZv-djZcs-pIvInW7wlRRVm1LD13y6S4

Even though a Cookie header is sent, accessing the JWT on the api is done through the req variable (of (req, res) {}), where the cookie is stored in the cookies property.

req.cookies
console.log(req.cookies);

// FUNCTION TO AUTHENTICATE EACH USER ACCESSING A PROTECTED ROUTE
const auth = async (req, res, next) => {
  // CHECK IF HEADERS HAVE THE BEAR WITH JWT TOKEN
  console.log(req.cookies);
}

Hence, there is no need to store JWT in the local storage if we can store the token in the cookie and have the broswer send automatically the cookie having the token to the api on every request make to the api.

By default, cookies are sent back to the api, if the api has the same domain as the front end(or frontend and api are hosted on the same address or server), if the frontend and api are hosted on different servers/services/platforms, then some changes need to be made on how the cookies will be configured and sent to the api from the frontend.

