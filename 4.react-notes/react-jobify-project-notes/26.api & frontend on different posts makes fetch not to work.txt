api & frontend running on different posts makes fetch not to work but putting them on the same port works ok.This is
causes cors crossorgin error in the browser causing the fecth of data not to work.

cross origin error example (server and frontend on different ports)

An example of a cross-origin request: the front-end JavaScript code served from
 https://domain-a.com uses XMLHttpRequest to make a request for https://domain-b.com/data.json.


In order for the fetching of data to work when running on different ports, server on a different port from the
react app

IN ORDER TO FIX THIS CORS PROBLEM AND RUN BACK AND FRONT END ON DIFFERENT PORTS, package called cols can be used (used
as a middleware) 

import cors from 'cors';
app.use(cors());


or make server configuration settings, this is the best way and also helps have short urls from the front end
when requesting data from the api as the proxy configuration will hold the begining part of all urls that frontend
will use to request resources from the api.

To tell the development server to proxy any unknown requests to your API server in development, add a proxy field
 to your package.json, for example:

  "proxy": "http://localhost:4000",

This way, when you fetch('/api/todos') in development, the development server will recognize that itâ€™s not a static
 asset, and will proxy your request to http://localhost:4000/api/todos as a fallback. The development server will 
only attempt to send requests without text/html in its Accept header to the proxy.

Conveniently, this avoids CORS issues and error messages like this in development:
Fetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the 
requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves 
your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.

