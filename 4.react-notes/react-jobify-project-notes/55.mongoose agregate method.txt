https://www.mongodb.com/docs/manual/core/aggregation-pipeline/

Aggregation Pipeline (THIS IS mongodb.com FEATURE BEING USED HERE AND NOT A mongoose PACKAGE)
An aggregation pipeline consists of one or more stages that process documents:

AGGREGATION() IS USED TO FILTER AND SORT DOCUMENTS AS THEY COME FROM THE DATABASE.THIS IS DONE ON THE SERVER.

Each stage performs an operation on the input documents. For example, a stage can filter documents, group documents, and calculate values.

The documents that are output from a stage are passed to the next stage.

An aggregation pipeline can return results for groups of documents. For example, return the total, average, maximum, and minimum values.

AGGREGATE IS USED LIKE A BACKEND PREPROCESSOR(FOR AXIOS),IT WORKS ON DATA FROM THE DATABASE JUST BEFORE ITS SENF
TO THE FRONT END. ITS SIMILAR TO THE PIPE(MAP()) FUNCTIONS IN ANGULAR FRONT END WHEN PROCESSING DATA COMING FROM THE DATABASE.

// FUNCTION TO GET THE JOB STATS
const showStats = async (req, res) => {

  // FILTERING AND SORTING DOCUMENT AFTER GETTING IT FROM DB - $match=filter,$group-filter also ,more detailed
  let stats = await Job.aggregate([

    // GET ALL JOBS CREATED BY THE LOGGED USER
    // Types.ObjectId() converts user id(a string) into a db object id
    { $match:{ createdBy:mongoose.Types.ObjectId(req.user.userId) }}, 

    // GROUP THE DOCUMENTS ACCORDING TO THE STATUS PROPERTY
    { $group: { _id: '$status', count: { $sum: 1 } } },
  ])
  res.status(StatusCodes.OK).json({ stats });
}

db.orders.aggregate( [
   // Stage 1: Filter pizza order documents by pizza size
   {
      $match: { size: "medium" }
   },
   // Stage 2: Group remaining documents by pizza name and calculate total quantity
   {
      $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } }
   }
] )


The $match stage: Filters the pizza order documents to pizzas with a size of medium.
Passes the remaining documents to the $group stage.

The $group stage: Groups the remaining documents by pizza name.

Uses $sum to calculate the total order quantity for each pizza name. The total is stored in the totalQuantity field returned by the aggregation pipeline.

Example output:

[
   { _id: 'Cheese', totalQuantity: 50 },
   { _id: 'Vegan', totalQuantity: 10 },
   { _id: 'Pepperoni', totalQuantity: 20 }
]